"use client"

import type React from "react"

import { useState, useRef, useEffect, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Brain,
  Send,
  Clock,
  Target,
  Lightbulb,
  CheckCircle,
  TrendingUp,
  Settings,
  AlertCircle,
  KeyRound,
} from "lucide-react"
import { useChat } from "@ai-sdk/react"
import GoalDecomposition from "./goal-decomposition"
import { ProgressAnalysis } from "./progress-analysis"
import { useToast } from "@/components/ui/use-toast"
import { motion } from "framer-motion"
import type { Profile, Goal } from "@/lib/supabase"

interface CoachSessionProps {
  userId: string
  sessionType: "goal-setting" | "progress-review" | "problem-solving" | "emotional-support"
  userProfile: Profile | null
  currentGoals: Goal[]
}

export function AICoachSession({ userId, sessionType, userProfile, currentGoals }: CoachSessionProps) {
  const [sessionPhase, setSessionPhase] = useState<"intro" | "exploration" | "action" | "closure">("intro")
  const [sessionInsights, setSessionInsights] = useState<string[]>([])
  const [activeTab, setActiveTab] = useState("chat")
  const [selectedGoal, setSelectedGoal] = useState<any>(null)
  const [apiKey, setApiKey] = useState("")
  const [isKeySaved, setIsKeySaved] = useState(false)
  const [aiConfigError, setAiConfigError] = useState<string | null>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const { toast } = useToast()

  const env = process.env.NEXT_PUBLIC_ENV ?? "all"

  const welcomeMessage = useMemo(() => {
    const userName = userProfile?.full_name || "–¥—Ä—É–≥"
    const greetings = {
      "goal-setting": `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å, –∏ —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò –∫–æ—É—á. –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ —Å–µ—Å—Å–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–π!

–°–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ:
‚ú® –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
üéØ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —á–µ—Ç–∫–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏
üìã –°–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π

–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥–∞—è –≤–µ–ª–∏–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞. –ò —Å–µ–≥–æ–¥–Ω—è –º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥ –≤–º–µ—Å—Ç–µ!

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å —Å—é–¥–∞? –ö–∞–∫–∏–µ –º–µ—á—Ç—ã –∏–ª–∏ –∑–∞–¥–∞—á–∏ –∫—Ä—É—Ç—è—Ç—Å—è —É –≤–∞—Å –≤ –≥–æ–ª–æ–≤–µ? ü§î`,

      "progress-review": `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üåü

–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å! –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –º—É–¥—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ—Ä—å–µ–∑–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.

–ù–∞ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –º—ã:
üìä –ß–µ—Å—Ç–Ω–æ –æ—Ü–µ–Ω–∏–º –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üîç –í—ã—è–≤–∏–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
üöÄ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –µ—â–µ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

${currentGoals.length > 0 ? `–Ø –≤–∏–∂—É, —É –≤–∞—Å –µ—Å—Ç—å ${currentGoals.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!` : "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, –Ω–∞–¥ —á–µ–º –≤—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç–µ."}

–ö–∞–∫ –¥–µ–ª–∞ —Å –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏? –ß—Ç–æ —É–¥–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ, –∞ –≥–¥–µ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ? üí≠`,

      "problem-solving": `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}! üí™

–í—ã –ø—Ä–∏—à–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ! –ö–∞–∂–¥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî —ç—Ç–æ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞. –ò —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —ç—Ç–æ —É–≤–∏–¥–µ—Ç—å.

–°–µ–≥–æ–¥–Ω—è –º—ã:
üß© –†–∞–∑–±–µ—Ä–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º
üí° –ù–∞–π–¥–µ–º –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚ö° –°–æ—Å—Ç–∞–≤–∏–º —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π

–ü–æ–º–Ω–∏—Ç–µ: –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º, –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Ä–µ—à–µ–Ω—ã. –ê –ª—é–±—É—é –∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –µ—Å–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –∫ –Ω–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ!

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å? –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? ü§ù`,

      "emotional-support": `–ü—Ä–∏–≤–µ—Ç, ${userName}! ü§ó

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏—Å—å –º–Ω–µ. –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äî —ç—Ç–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—ã, –∞ –Ω–µ —Å–ª–∞–±–æ—Å—Ç–∏. –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ —Å–µ–±–µ.

–í —ç—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –º—ã:
üíô –†–∞–∑–±–µ—Ä–µ–º—Å—è —Å –≤–∞—à–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏
üå± –ù–∞–π–¥–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
üßò –û—Å–≤–æ–∏–º —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è

–ü–æ–º–Ω–∏—Ç–µ: –≤—Å–µ —ç–º–æ—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã, –¥–∞–∂–µ —Å–∞–º—ã–µ —Ç—è–∂–µ–ª—ã–µ. –ò –≤—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—Ç–µ.

–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏? –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíö`,
    }
    return greetings[sessionType] || greetings["goal-setting"]
  }, [sessionType, userProfile?.full_name, currentGoals.length])

  useEffect(() => {
    const savedKey = localStorage.getItem("openai_api_key")
    if (savedKey) {
      setApiKey(savedKey)
      setIsKeySaved(true)
    }
  }, [])

  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({
    api: "/api/ai-coach",
    body: {
      userId,
      sessionType,
      userProfile,
      currentGoals,
      apiKey, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á –≤ API
    },
    initialMessages: [
      {
        id: "welcome-message",
        role: "assistant",
        content: welcomeMessage,
        createdAt: new Date(),
      },
    ],
    onError: (error) => {
      console.error("Chat error:", error)

      if (error.message?.includes("API key") || error.message?.includes("401")) {
        setAiConfigError("–ö–ª—é—á OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        setIsKeySaved(false) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
      } else if (error.message?.includes("quota") || error.message?.includes("billing")) {
        setAiConfigError("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞.")
      } else if (error.message?.includes("fetch")) {
        toast({
          title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
          description: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
          variant: "destructive",
        })
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ —á–∞—Ç–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ—É—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          variant: "destructive",
        })
      }
    },
    onFinish: (message) => {
      analyzeCoachResponse(message.content)
      extractInsights(message.content)
    },
  })

  useEffect(() => {
    if (error) {
      console.error("useChat error:", error)
    }
  }, [error])

  const analyzeCoachResponse = (content: string) => {
    if (content.includes("–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ") || content.includes("–¥–æ –≤—Å—Ç—Ä–µ—á–∏")) setSessionPhase("closure")
    else if (content.includes("–ø–æ–ø—Ä–æ–±—É–π") || content.includes("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ") || content.includes("–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è"))
      setSessionPhase("action")
    else if (content.includes("—Ä–∞—Å—Å–∫–∞–∂–∏") || content.includes("–∫–∞–∫ —Ç—ã")) setSessionPhase("exploration")
  }

  const extractInsights = (content: string) => {
    if (content.includes("–≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å") || content.includes("–∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç")) {
      const insight = content.split(".")[0] + "."
      setSessionInsights((prev) => [...prev.slice(-2), insight])
    }
  }

  const handleGoalDecomposition = (subGoals: any[]) => {
    console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ü–µ–ª–∏:", subGoals)
    setActiveTab("chat")
  }

  const handleProgressAnalysis = (goalData: any) => {
    setSelectedGoal(goalData)
    setActiveTab("analysis")
  }

  const handleRecommendation = (recommendation: any) => {
    console.log("–ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:", recommendation)
  }

  const getPhaseIcon = (phase: string) => {
    switch (phase) {
      case "intro":
        return <Brain className="h-4 w-4" />
      case "exploration":
        return <Target className="h-4 w-4" />
      case "action":
        return <Lightbulb className="h-4 w-4" />
      case "closure":
        return <CheckCircle className="h-4 w-4" />
      default:
        return <Brain className="h-4 w-4" />
    }
  }

  const getPhaseLabel = (phase: string) => {
    switch (phase) {
      case "intro":
        return "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
      case "exploration":
        return "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
      case "action":
        return "–î–µ–π—Å—Ç–≤–∏–µ"
      case "closure":
        return "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
      default:
        return "–°–µ—Å—Å–∏—è"
    }
  }

  const getSessionTypeLabel = (type: string) => {
    const labels = {
      "goal-setting": "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π",
      "progress-review": "–û–±–∑–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      "problem-solving": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
      "emotional-support": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    }
    return labels[type as keyof typeof labels] || "–°–µ—Å—Å–∏—è"
  }

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  const handleSaveKey = () => {
    if (apiKey.trim().startsWith("sk-")) {
      localStorage.setItem("openai_api_key", apiKey.trim())
      setIsKeySaved(true)
      setAiConfigError(null)
      toast({
        title: "API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        description: "–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–µ—Å—Å–∏—é.",
      })
    } else {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞",
        description: "–ö–ª—é—á OpenAI API –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-'.",
        variant: "destructive",
      })
    }
  }

  const canSubmit = !isLoading && input?.trim().length > 0 && isKeySaved

  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!canSubmit) {
      return
    }
    handleSubmit(e)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.3 }}
      className="max-w-6xl mx-auto p-6"
    >
      <Card className="mb-6">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Avatar className="h-12 w-12">
                <AvatarFallback className="bg-blue-100 text-blue-600">
                  <Brain className="h-6 w-6" />
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="flex items-center gap-2">
                  –ê–ª–µ–∫—Å - –≤–∞—à –ò–ò –∫–æ—É—á
                  <Badge variant="secondary" className="ml-2">
                    {getPhaseIcon(sessionPhase)}
                    {getPhaseLabel(sessionPhase)}
                  </Badge>
                  {aiConfigError && (
                    <Badge variant="destructive" className="ml-2">
                      <AlertCircle className="h-4 w-4 mr-1" />
                      –û—à–∏–±–∫–∞
                    </Badge>
                  )}
                </CardTitle>
                <CardDescription>–°–µ—Å—Å–∏—è: {getSessionTypeLabel(sessionType)}</CardDescription>
              </div>
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Clock className="h-4 w-4" />
              {new Date().toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })}
            </div>
          </div>
        </CardHeader>
      </Card>

      {aiConfigError && (
        <Card className="mb-6 border-red-400 bg-red-50">
          <CardContent className="pt-6">
            <div className="flex flex-col gap-4 text-red-900">
              <div className="flex items-start gap-3">
                <AlertCircle className="h-8 w-8 flex-shrink-0 mt-1" />
                <div>
                  <h3 className="font-bold">–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò-–∫–æ—É—á–∞</h3>
                  <p className="text-sm">{aiConfigError}</p>
                </div>
              </div>
              <div className="flex gap-2 items-center">
                <KeyRound className="h-5 w-5 text-gray-500" />
                <Input
                  type="password"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á (sk-...)"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  className="border-red-300 focus-visible:ring-red-500"
                />
                <Button variant="destructive" onClick={handleSaveKey}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {env === "all" && (
        <Card className="mb-6 border-blue-200 bg-blue-50">
          <CardContent className="pt-4">
            <div className="text-xs text-blue-800">
              <p>Debug Info (Environment: {env}):</p>
              <p>Messages count: {messages.length}</p>
              <p>Input length: {input?.length || 0}</p>
              <p>Input value: "{input}"</p>
              <p>Input trimmed length: {input?.trim().length || 0}</p>
              <p>Is loading: {isLoading ? "true" : "false"}</p>
              <p>Can submit: {canSubmit ? "true" : "false"}</p>
              <p>AI Config Error: {aiConfigError ? "Yes" : "No"}</p>
              <p>Error: {error?.message || "None"}</p>
            </div>
          </CardContent>
        </Card>
      )}

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="chat">–î–∏–∞–ª–æ–≥ —Å –∫–æ—É—á–µ–º</TabsTrigger>
          <TabsTrigger value="decomposition">–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–µ–π</TabsTrigger>
          <TabsTrigger value="analysis">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</TabsTrigger>
        </TabsList>

        <TabsContent value="chat" className="mt-6">
          <div className="grid lg:grid-cols-4 gap-6">
            <div className="lg:col-span-3">
              <Card className="h-[600px] flex flex-col">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">–î–∏–∞–ª–æ–≥ —Å –∫–æ—É—á–µ–º</CardTitle>
                </CardHeader>
                <CardContent className="flex-1 flex flex-col">
                  <ScrollArea className="flex-1 pr-4" ref={scrollAreaRef}>
                    <motion.div layout className="space-y-4">
                      {messages.map((message, i) => (
                        <motion.div
                          key={message.id}
                          layout
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.2, delay: i * 0.02 }}
                          className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                        >
                          {message.role === "assistant" && (
                            <Avatar className="h-8 w-8 mt-1">
                              <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                                <Brain className="h-4 w-4" />
                              </AvatarFallback>
                            </Avatar>
                          )}
                          <div
                            className={`max-w-[80%] rounded-lg px-4 py-2 ${
                              message.role === "user" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-900 border"
                            }`}
                          >
                            <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</p>
                            <span className="text-xs opacity-70 mt-1 block">
                              {new Date(message.createdAt || Date.now()).toLocaleTimeString("ru-RU", {
                                hour: "2-digit",
                                minute: "2-digit",
                              })}
                            </span>
                          </div>
                          {message.role === "user" && (
                            <Avatar className="h-8 w-8 mt-1">
                              <AvatarFallback className="bg-green-100 text-green-600 text-xs">
                                {userProfile?.full_name?.[0] || "–£"}
                              </AvatarFallback>
                            </Avatar>
                          )}
                        </motion.div>
                      ))}
                      {isLoading && (
                        <motion.div
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          className="flex gap-3 justify-start"
                        >
                          <Avatar className="h-8 w-8 mt-1">
                            <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                              <Brain className="h-4 w-4" />
                            </AvatarFallback>
                          </Avatar>
                          <div className="bg-gray-100 rounded-lg px-4 py-2 border flex items-center gap-2">
                            <span className="text-sm text-gray-500">–ê–ª–µ–∫—Å –ø–µ—á–∞—Ç–∞–µ—Ç</span>
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.1s" }}
                              ></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.2s" }}
                              ></div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </motion.div>
                  </ScrollArea>

                  <form onSubmit={onSubmit} className="flex gap-2 mt-4">
                    <Input
                      value={input}
                      onChange={handleInputChange}
                      placeholder={!isKeySaved ? "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á" : "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."}
                      className="flex-1"
                      disabled={isLoading || !isKeySaved}
                      onKeyDown={(e) => {
                        if (e.key === "Enter" && !e.shiftKey) {
                          e.preventDefault()
                          if (canSubmit) {
                            onSubmit(e as any)
                          }
                        }
                      }}
                    />
                    <Button type="submit" disabled={!canSubmit}>
                      <Send className="h-4 w-4" />
                    </Button>
                  </form>
                </CardContent>
              </Card>
            </div>

            <div className="space-y-4">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm">–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {["intro", "exploration", "action", "closure"].map((phase, index) => (
                    <div key={phase} className="flex items-center gap-2">
                      <div
                        className={`w-3 h-3 rounded-full ${
                          sessionPhase === phase
                            ? "bg-blue-600"
                            : index < ["intro", "exploration", "action", "closure"].indexOf(sessionPhase)
                              ? "bg-green-600"
                              : "bg-gray-200"
                        }`}
                      />
                      <span className="text-sm">{getPhaseLabel(phase)}</span>
                    </div>
                  ))}
                </CardContent>
              </Card>

              {currentGoals.length > 0 && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">–í–∞—à–∏ —Ü–µ–ª–∏</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {currentGoals.slice(0, 3).map((goal) => (
                      <div key={goal.id} className="text-sm">
                        <div className="font-medium">{goal.title}</div>
                        <div className="text-gray-500 text-xs">{goal.progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}

              {sessionInsights.length > 0 && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">–ò–Ω—Å–∞–π—Ç—ã —Å–µ—Å—Å–∏–∏</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {sessionInsights.map((insight, index) => (
                      <div key={index} className="text-sm p-2 bg-yellow-50 rounded border-l-2 border-yellow-400">
                        {insight}
                      </div>
                    ))}
                  </CardContent>
                </Card>
              )}

              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—É—á–∞</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full justify-start text-xs bg-transparent"
                    onClick={() => setActiveTab("decomposition")}
                  >
                    <Target className="h-3 w-3 mr-2" />
                    –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–µ–π
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full justify-start text-xs bg-transparent"
                    onClick={() => setActiveTab("analysis")}
                  >
                    <TrendingUp className="h-3 w-3 mr-2" />
                    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                  </Button>
                  <Button variant="outline" size="sm" className="w-full justify-start text-xs bg-transparent">
                    <Settings className="h-3 w-3 mr-2" />
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="decomposition" className="mt-6">
          {currentGoals.length > 0 ? (
            <GoalDecomposition
              mainGoal={currentGoals[0]}
              onSave={handleGoalDecomposition}
              onAnalyze={handleProgressAnalysis}
            />
          ) : (
            <Card>
              <CardContent className="pt-6 text-center">
                <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                <p className="text-gray-600 mb-4">–°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ª—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é</p>
                <Button>–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å</Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="analysis" className="mt-6">
          {selectedGoal ? (
            <ProgressAnalysis goalData={selectedGoal} onRecommendation={handleRecommendation} />
          ) : (
            <Card>
              <CardContent className="pt-6 text-center">
                <TrendingUp className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
                <p className="text-gray-600 mb-4">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"</p>
                <Button onClick={() => setActiveTab("decomposition")}>–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏</Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </motion.div>
  )
}
