import { createClient } from "@/lib/supabase/server"
import type { Achievement, AchievementInsert } from "@/lib/supabase/types"
import { AnalyticsService } from "./analytics-service"

export class AchievementsService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserAchievements(userId: string): Promise<Achievement[]> {
    const supabase = createClient()

    const { data, error } = await supabase
      .from("achievements")
      .select("*")
      .eq("user_id", userId)
      .order("created_at", { ascending: false })

    if (error) {
      console.error("Error fetching achievements:", error)
      throw error
    }

    return data || []
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getRecentAchievements(userId: string, limit = 3): Promise<Achievement[]> {
    const supabase = createClient()

    const { data, error } = await supabase
      .from("achievements")
      .select("*")
      .eq("user_id", userId)
      .order("created_at", { ascending: false })
      .limit(limit)

    if (error) {
      console.error("Error fetching recent achievements:", error)
      throw error
    }

    return data || []
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   */
  static async createAchievement(achievement: AchievementInsert): Promise<Achievement | null> {
    const supabase = createClient()

    const { data, error } = await supabase.from("achievements").insert(achievement).select().single()

    if (error) {
      console.error("Error creating achievement:", error)
      throw error
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await AnalyticsService.recordMetric(achievement.user_id, "achievement_earned", achievement.points || 10, {
      achievement_id: data.id,
      achievement_title: achievement.title,
      achievement_type: achievement.type,
    })

    return data
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–µ–ª–∏
   */
  static async createGoalCompletionAchievement(
    userId: string,
    goalId: string,
    goalTitle: string,
  ): Promise<Achievement | null> {
    const achievement: AchievementInsert = {
      user_id: userId,
      type: "goal_completed",
      title: `–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ${goalTitle}`,
      description: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ü–µ–ª—å "${goalTitle}". –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`,
      icon: "üèÜ",
      points: 50,
      goal_id: goalId,
      metadata: {
        goal_title: goalTitle,
        completed_at: new Date().toISOString(),
      },
    }

    return await this.createAchievement(achievement)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  static async createMilestoneAchievement(
    userId: string,
    goalId: string,
    goalTitle: string,
    progress: number,
  ): Promise<Achievement | null> {
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (progress !== 25 && progress !== 50 && progress !== 75) {
      return null
    }

    const milestoneTexts = {
      25: "–ß–µ—Ç–≤–µ—Ä—Ç—å –ø—É—Ç–∏",
      50: "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏",
      75: "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏",
    }

    const milestoneIcons = {
      25: "üå±",
      50: "üåø",
      75: "üå≥",
    }

    const achievement: AchievementInsert = {
      user_id: userId,
      type: "milestone_reached",
      title: `${milestoneTexts[progress as keyof typeof milestoneTexts]}: ${goalTitle}`,
      description: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${progress}% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ü–µ–ª–∏ "${goalTitle}". –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`,
      icon: milestoneIcons[progress as keyof typeof milestoneIcons],
      points: progress / 5, // 5, 10 –∏–ª–∏ 15 –æ—á–∫–æ–≤
      goal_id: goalId,
      metadata: {
        goal_title: goalTitle,
        progress: progress,
        reached_at: new Date().toISOString(),
      },
    }

    return await this.createAchievement(achievement)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ—É—á–∏–Ω–≥-—Å–µ—Å—Å–∏–∏
   */
  static async createSessionCompletionAchievement(
    userId: string,
    sessionId: string,
    sessionType: string,
  ): Promise<Achievement | null> {
    const sessionTypeTexts = {
      "goal-setting": "–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π",
      "progress-review": "–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      "problem-solving": "—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º",
      "emotional-support": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    }

    const sessionTypeIcons = {
      "goal-setting": "üéØ",
      "progress-review": "üìä",
      "problem-solving": "üß©",
      "emotional-support": "üåà",
    }

    const typeText = sessionTypeTexts[sessionType as keyof typeof sessionTypeTexts] || "–∫–æ—É—á–∏–Ω–≥–∞"
    const icon = sessionTypeIcons[sessionType as keyof typeof sessionTypeIcons] || "üîç"

    const achievement: AchievementInsert = {
      user_id: userId,
      type: "session_completed",
      title: `–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è ${typeText}`,
      description: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–æ—É—á–∏–Ω–≥-—Å–µ—Å—Å–∏—é. –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!`,
      icon: icon,
      points: 20,
      session_id: sessionId,
      metadata: {
        session_type: sessionType,
        completed_at: new Date().toISOString(),
      },
    }

    return await this.createAchievement(achievement)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–µ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
   */
  static async createStreakAchievement(userId: string, count: number): Promise<Achievement | null> {
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–µ–ª–µ–π
    if (count !== 3 && count !== 5 && count !== 10) {
      return null
    }

    const streakTexts = {
      3: "–•–µ—Ç-—Ç—Ä–∏–∫",
      5: "–ü—è—Ç–µ—Ä–∫–∞ –ª—É—á—à–∏—Ö",
      10: "–î–µ—Å—è—Ç–∫–∞!",
    }

    const streakIcons = {
      3: "üî•",
      5: "‚≠ê",
      10: "üåü",
    }

    const achievement: AchievementInsert = {
      user_id: userId,
      type: "streak_achieved",
      title: streakTexts[count as keyof typeof streakTexts],
      description: `–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ ${count} —Ü–µ–ª–µ–π! –í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!`,
      icon: streakIcons[count as keyof typeof streakIcons],
      points: count * 10,
      metadata: {
        streak_count: count,
        achieved_at: new Date().toISOString(),
      },
    }

    return await this.createAchievement(achievement)
  }
}
