"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Brain, Target, TrendingUp, Star, Clock, Send, Lightbulb, Home } from "lucide-react"
import { useRouter } from "next/navigation"
import { db, type Goal, type CoachingSession } from "@/lib/local-storage"
import { toast } from "sonner"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import Link from "next/link"

export default function CoachClientPage() {
  const [goals, setGoals] = useState<Goal[]>([])
  const [sessions, setSessions] = useState<CoachingSession[]>([])
  const [loading, setLoading] = useState(true)
  const [chatMode, setChatMode] = useState(false)
  const [message, setMessage] = useState("")
  const [chatHistory, setChatHistory] = useState<Array<{ role: "user" | "assistant"; content: string }>>([])
  const [isTyping, setIsTyping] = useState(false)
  const [sessionType, setSessionType] = useState<string>("")
  const [selectedGoal, setSelectedGoal] = useState<string>("")
  const [sessionRating, setSessionRating] = useState<number>(5)
  const [showRating, setShowRating] = useState<boolean>(false)
  const router = useRouter()

  useEffect(() => {
    loadCoachData()
  }, [])

  const loadCoachData = async () => {
    try {
      const user = db.getCurrentUser()
      if (!user) {
        router.push("/auth/signin")
        return
      }

      const userGoals = db.getGoals(user)
      const userSessions = db.getSessions(user)

      setGoals(userGoals)
      setSessions(userSessions)
      setLoading(false)
    } catch (error) {
      console.error("Error loading coach data:", error)
      setLoading(false)
    }
  }

  const handleStartSession = (type: string) => {
    if (type === "progress-review" && !selectedGoal && goals.length > 0) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
      return
    }

    setSessionType(type)
    setChatMode(true)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
    const goalInfo = selectedGoal ? goals.find((g) => g.id === selectedGoal) : null

    const welcomeMessage = getWelcomeMessage(type, goalInfo)
    setChatHistory([{ role: "assistant", content: welcomeMessage }])
  }

  const getWelcomeMessage = (type: string, goalInfo?: Goal | null) => {
    switch (type) {
      case "goal-planning":
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∫–æ—É—á. –î–∞–≤–∞–π—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –∏–ª–∏ –Ω–∞–¥ –∫–∞–∫–æ–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
      case "motivation":
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π. –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É–ø–∞–¥–æ–∫ —Å–∏–ª –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞?"
      case "progress-review":
        return goalInfo
          ? `–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ "${goalInfo.title}" (${goalInfo.progress}%). –ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ, –∞ –≥–¥–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?`
          : "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –¥–µ–ª–∞ —Å –≤–∞—à–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–ª—è–º–∏? –ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ, –∞ –≥–¥–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?"
      case "problem-solving":
        return "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã! –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏ –º—ã –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ."
      default:
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
    }
  }

  const handleSendMessage = async () => {
    if (!message.trim()) return

    const userMessage = message.trim()
    setMessage("")
    setChatHistory((prev) => [...prev, { role: "user", content: userMessage }])
    setIsTyping(true)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
      const goalInfo = selectedGoal ? goals.find((g) => g.id === selectedGoal) : null

      // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ OpenAI API
      const response = await fetch("/api/ai-coach", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: userMessage,
          sessionType: sessionType,
          chatHistory: chatHistory,
          userGoals: goals,
          selectedGoal: goalInfo,
        }),
      })

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI")
      }

      const data = await response.json()
      setChatHistory((prev) => [...prev, { role: "assistant", content: data.response }])
    } catch (error) {
      console.error("AI Coach error:", error)
      // Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API
      const fallbackResponse =
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
      setChatHistory((prev) => [...prev, { role: "assistant", content: fallbackResponse }])
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI –∫–æ—É—á—É")
    } finally {
      setIsTyping(false)
    }
  }

  const handleEndSession = () => {
    setShowRating(true)
  }

  const handleSubmitRating = () => {
    const user = db.getCurrentUser()
    if (!user) return

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–µ—Å—Å–∏–∏
    const insights = [
      "–í–∞–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏",
      "–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
      "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è —É—Å–ø–µ—Ö–∞",
    ]

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
    const goalInfo = selectedGoal ? goals.find((g) => g.id === selectedGoal) : null

    const session = db.createSession(user, {
      session_type: sessionType,
      title: goalInfo
        ? `${getSessionTypeTitle(sessionType)}: ${goalInfo.title}`
        : `${getSessionTypeTitle(sessionType)}`,
      content: chatHistory.map((msg) => `${msg.role}: ${msg.content}`).join("\n"),
      insights,
      rating: sessionRating,
      duration: 30,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (sessions.length === 0) {
      db.createAchievement({
        user_id: user,
        title: "–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è",
        description: "–ü—Ä–æ–≤–µ–ª–∏ –ø–µ—Ä–≤—É—é –∫–æ—É—á-—Å–µ—Å—Å–∏—é!",
        icon: "üéØ",
      })
    }

    setChatMode(false)
    setChatHistory([])
    setSessionType("")
    setSelectedGoal("")
    setShowRating(false)
    loadCoachData()
    toast.success("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–Ω—Å–∞–π—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
  }

  const getSessionTypeTitle = (type: string) => {
    switch (type) {
      case "goal-planning":
        return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π"
      case "motivation":
        return "–†–∞–±–æ—Ç–∞ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π"
      case "progress-review":
        return "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
      case "problem-solving":
        return "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
      default:
        return "–û–±—â–∞—è —Å–µ—Å—Å–∏—è"
    }
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  if (showRating) {
    return (
      <div className="p-6 max-w-md mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>–û—Ü–µ–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é</CardTitle>
            <CardDescription>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ—É—á–∏–Ω–≥–∞</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex justify-center gap-2">
              {[1, 2, 3, 4, 5].map((rating) => (
                <button
                  key={rating}
                  onClick={() => setSessionRating(rating)}
                  className={`w-12 h-12 rounded-full flex items-center justify-center text-xl transition-all ${
                    sessionRating >= rating ? "bg-yellow-400 text-white" : "bg-gray-200 text-gray-500"
                  }`}
                >
                  ‚òÖ
                </button>
              ))}
            </div>
            <p className="text-center text-sm text-gray-600">
              {sessionRating === 1 && "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ"}
              {sessionRating === 2 && "–ü–ª–æ—Ö–æ"}
              {sessionRating === 3 && "–ù–æ—Ä–º–∞–ª—å–Ω–æ"}
              {sessionRating === 4 && "–•–æ—Ä–æ—à–æ"}
              {sessionRating === 5 && "–û—Ç–ª–∏—á–Ω–æ"}
            </p>
            <Button onClick={handleSubmitRating} className="w-full">
              –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (chatMode) {
    return (
      <div className="p-6 max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-3xl font-bold">AI –ö–æ—É—á-—Å–µ—Å—Å–∏—è: {getSessionTypeTitle(sessionType)}</h1>
          <Button variant="outline" onClick={handleEndSession}>
            –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
          </Button>
        </div>

        <Card className="h-[600px] flex flex-col">
          <CardContent className="flex-1 p-4 overflow-y-auto">
            <div className="space-y-4">
              {chatHistory.map((msg, index) => (
                <div key={index} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      msg.role === "user" ? "bg-blue-500 text-white" : "bg-gray-100 text-gray-900"
                    }`}
                  >
                    {msg.content}
                  </div>
                </div>
              ))}
              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 text-gray-900 p-3 rounded-lg">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <Textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="flex-1"
                rows={2}
                onKeyPress={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault()
                    handleSendMessage()
                  }
                }}
              />
              <Button onClick={handleSendMessage} disabled={!message.trim() || isTyping}>
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">AI –ö–æ—É—á</h1>
          <p className="text-muted-foreground">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π</p>
        </div>
        <Button variant="outline" asChild>
          <Link href="/dashboard">
            <Home className="h-4 w-4 mr-2" />
            –ù–∞ –¥–∞—à–±–æ—Ä–¥
          </Link>
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏</p>
                <p className="text-2xl font-bold">{goals.filter((g) => g.status === "active").length}</p>
              </div>
              <Target className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π</p>
                <p className="text-2xl font-bold">{sessions.length}</p>
              </div>
              <Brain className="h-8 w-8 text-purple-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</p>
                <p className="text-2xl font-bold">
                  {sessions.length > 0
                    ? (sessions.reduce((sum, s) => sum + s.rating, 0) / sessions.length).toFixed(1)
                    : "0.0"}
                </p>
              </div>
              <Star className="h-8 w-8 text-yellow-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –í—ã–±–æ—Ä —Ü–µ–ª–∏ */}
      {goals.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã</CardTitle>
            <CardDescription>–í—ã–±–æ—Ä —Ü–µ–ª–∏ –ø–æ–º–æ–∂–µ—Ç –∫–æ—É—á—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏</CardDescription>
          </CardHeader>
          <CardContent>
            <Select value={selectedGoal} onValueChange={setSelectedGoal}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å" />
              </SelectTrigger>
              <SelectContent>
                {goals.map((goal) => (
                  <SelectItem key={goal.id} value={goal.id}>
                    {goal.title} ({goal.progress}%)
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>
      )}

      {/* –¢–∏–ø—ã —Å–µ—Å—Å–∏–π */}
      <Card>
        <CardHeader>
          <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—É—á-—Å–µ—Å—Å–∏–∏</CardTitle>
          <CardDescription>–ö–∞–∂–¥—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Button
              variant="outline"
              className="h-auto p-4 flex flex-col items-start space-y-2 bg-transparent"
              onClick={() => handleStartSession("goal-planning")}
            >
              <div className="flex items-center gap-2">
                <Target className="h-5 w-5 text-blue-600" />
                <span className="font-semibold">–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π</span>
              </div>
              <p className="text-sm text-gray-600 text-left">–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ</p>
            </Button>

            <Button
              variant="outline"
              className="h-auto p-4 flex flex-col items-start space-y-2 bg-transparent"
              onClick={() => handleStartSession("motivation")}
            >
              <div className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-green-600" />
                <span className="font-semibold">–†–∞–±–æ—Ç–∞ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π</span>
              </div>
              <p className="text-sm text-gray-600 text-left">–ù–∞–π–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–π—Ç–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è</p>
            </Button>

            <Button
              variant="outline"
              className="h-auto p-4 flex flex-col items-start space-y-2 bg-transparent"
              onClick={() => handleStartSession("progress-review")}
            >
              <div className="flex items-center gap-2">
                <Clock className="h-5 w-5 text-purple-600" />
                <span className="font-semibold">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</span>
              </div>
              <p className="text-sm text-gray-600 text-left">–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω—ã</p>
            </Button>

            <Button
              variant="outline"
              className="h-auto p-4 flex flex-col items-start space-y-2 bg-transparent"
              onClick={() => handleStartSession("problem-solving")}
            >
              <div className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-orange-600" />
                <span className="font-semibold">–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</span>
              </div>
              <p className="text-sm text-gray-600 text-left">–ù–∞–π–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π</p>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π */}
      {sessions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {sessions
                .slice(-5)
                .reverse()
                .map((session) => (
                  <div key={session.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex-1">
                      <h4 className="font-medium">{session.title}</h4>
                      {session.session_type === "progress-review" && (
                        <p className="text-xs text-blue-600">–¶–µ–ª—å: {session.title.split(": ")[1] || "–û–±—â–∞—è"}</p>
                      )}
                    </div>
                    <div className="flex items-center gap-1">
                      {[...Array(5)].map((_, i) => (
                        <Star
                          key={i}
                          className={`h-4 w-4 ${i < session.rating ? "text-yellow-400 fill-current" : "text-gray-300"}`}
                        />
                      ))}
                    </div>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
