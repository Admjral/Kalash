"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Send, Bot, User, Lightbulb, Star, MessageCircle, Loader2, Brain } from "lucide-react"
import { useRouter } from "next/navigation"
import { db } from "@/lib/local-storage"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
}

interface Insight {
  id: string
  text: string
  type: "tip" | "motivation" | "strategy"
}

export default function AICoachSession() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      role: "assistant",
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∫–æ—É—á. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [loading, setLoading] = useState(false)
  const [insights, setInsights] = useState<Insight[]>([])
  const [sessionRating, setSessionRating] = useState<number | null>(null)
  const [sessionStartTime] = useState(new Date())
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const router = useRouter()

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = db.getCurrentUser()
    if (!user) {
      router.push("/auth/signin")
      return
    }
  }, [router])

  useEffect(() => {
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  const generateAIResponse = (userMessage: string): { response: string; insights: string[] } => {
    const responses = [
      {
        keywords: ["—Ü–µ–ª—å", "—Ö–æ—á—É", "–ø–ª–∞–Ω–∏—Ä—É—é", "–º–µ—á—Ç–∞—é"],
        response:
          "–û—Ç–ª–∏—á–Ω–∞—è —Ü–µ–ª—å! –î–ª—è –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –µ—ë –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ —à–∞–≥–∏. –ö–∞–∫–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤—ã –º–æ–≥–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è?",
        insights: ["–ß–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö –Ω–∞ 42%"],
      },
      {
        keywords: ["–ø—Ä–æ–±–ª–µ–º–∞", "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å", "—Å–ª–æ–∂–Ω–æ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"],
        response:
          "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–æ—Å—Ç–æ. –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∏ –Ω–∞–π–¥–µ–º —Å–ø–æ—Å–æ–±—ã –∏—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è.",
        insights: ["–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è"],
      },
      {
        keywords: ["–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—ç–Ω–µ—Ä–≥–∏—è"],
        response:
          "–ú–æ—Ç–∏–≤–∞—Ü–∏—è - —ç—Ç–æ –≤–∞–∂–Ω—ã–π —Ä–µ—Å—É—Ä—Å! –û–Ω–∞ –º–æ–∂–µ—Ç –∫–æ–ª–µ–±–∞—Ç—å—Å—è, –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∑–∞—á–µ–º –≤–∞–º –≤–∞–∂–Ω–∞ —ç—Ç–∞ —Ü–µ–ª—å. –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤ –≤–∞—à—É –∂–∏–∑–Ω—å?",
        insights: ["–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–∞, —á–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–º—É–ª—ã"],
      },
      {
        keywords: ["–≤—Ä–µ–º—è", "—É—Å–ø–µ—Ç—å", "–¥–µ–¥–ª–∞–π–Ω"],
        response:
          "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º - –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: –≤—ã–¥–µ–ª–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Ü–µ–ª—å—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
        insights: ["–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ª—É—á—à–µ 15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á–µ–º 2 —á–∞—Å–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"],
      },
    ]

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
    const matchedResponse = responses.find((r) =>
      r.keywords.some((keyword) => userMessage.toLowerCase().includes(keyword)),
    )

    if (matchedResponse) {
      return {
        response: matchedResponse.response,
        insights: matchedResponse.insights,
      }
    }

    // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    const generalResponses = [
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
      "–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã —Ä–∞–∑–º—ã—à–ª—è–µ—Ç–µ –Ω–∞–¥ –≤–∞–∂–Ω—ã–º–∏ –≤–µ—â–∞–º–∏. –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –≤—ã —É–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏?",
      "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ! –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–º–æ—á—å –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
      "–í–∞—à–∏ –º—ã—Å–ª–∏ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥–µ–º –Ω–∞–∏–ª—É—á—à–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
    ]

    return {
      response: generalResponses[Math.floor(Math.random() * generalResponses.length)],
      insights: ["–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ - –≤–∞–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"],
    }
  }

  const sendMessage = async () => {
    if (!input.trim() || loading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input.trim(),
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setLoading(true)

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ò–ò
      await new Promise((resolve) => setTimeout(resolve, 1500))

      const { response, insights: newInsights } = generateAIResponse(userMessage.content)

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: response,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, assistantMessage])

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã
      if (newInsights.length > 0) {
        const insightObjects: Insight[] = newInsights.map((text, index) => ({
          id: Date.now() + index,
          text,
          type: "tip" as const,
        }))

        setInsights((prev) => [...prev, ...insightObjects])
      }
    } catch (error) {
      console.error("AI Coach error:", error)

      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const rateSession = async (rating: number) => {
    setSessionRating(rating)

    const user = db.getCurrentUser()
    if (user) {
      const duration = Math.floor((Date.now() - sessionStartTime.getTime()) / 1000 / 60)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      db.createSession({
        user_id: user.id,
        session_type: "general-coaching",
        duration: duration,
        rating: rating,
        insights: insights.map((i) => i.text),
        messages: messages.map((m) => ({
          role: m.role,
          content: m.content,
          timestamp: m.timestamp.toISOString(),
        })),
      })

      // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const userSessions = db.getSessions(user.id)
      if (userSessions.length === 1) {
        db.createAchievement({
          user_id: user.id,
          title: "–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è",
          description: "–ü—Ä–æ–≤–µ–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ—É—á-—Å–µ—Å—Å–∏—é",
          icon: "üéØ",
        })
      }

      if (rating === 5) {
        db.createAchievement({
          user_id: user.id,
          title: "–û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Å—Å–∏—è",
          description: "–û—Ü–µ–Ω–∏–ª–∏ —Å–µ—Å—Å–∏—é –Ω–∞ 5 –∑–≤–µ–∑–¥",
          icon: "‚≠ê",
        })
      }

      if (userSessions.length === 10) {
        db.createAchievement({
          user_id: user.id,
          title: "–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—É—á–∏",
          description: "–ü—Ä–æ–≤–µ–ª–∏ 10 –∫–æ—É—á-—Å–µ—Å—Å–∏–π",
          icon: "üèÜ",
        })
      }
    }
  }

  const currentDuration = Math.floor((Date.now() - sessionStartTime.getTime()) / 1000 / 60)

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-200px)]">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç */}
      <div className="lg:col-span-3">
        <Card className="h-full flex flex-col">
          <CardHeader className="flex-shrink-0">
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="h-5 w-5 text-blue-600" />
                  –ò–ò-–ö–æ—É—á
                </CardTitle>
                <CardDescription>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π</CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  –û–Ω–ª–∞–π–Ω
                </Badge>
                <Badge variant="outline">{currentDuration} –º–∏–Ω</Badge>
              </div>
            </div>
          </CardHeader>

          <CardContent className="flex-1 flex flex-col p-0">
            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                  >
                    {message.role === "assistant" && (
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="bg-blue-100">
                          <Bot className="h-4 w-4 text-blue-600" />
                        </AvatarFallback>
                      </Avatar>
                    )}

                    <div
                      className={`max-w-[80%] rounded-lg px-4 py-2 ${
                        message.role === "user" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-900"
                      }`}
                    >
                      <p className="text-sm">{message.content}</p>
                      <p className={`text-xs mt-1 ${message.role === "user" ? "text-blue-100" : "text-gray-500"}`}>
                        {message.timestamp.toLocaleTimeString("ru-RU", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </p>
                    </div>

                    {message.role === "user" && (
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="bg-gray-100">
                          <User className="h-4 w-4 text-gray-600" />
                        </AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}

                {loading && (
                  <div className="flex gap-3 justify-start">
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="bg-blue-100">
                        <Bot className="h-4 w-4 text-blue-600" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-gray-100 rounded-lg px-4 py-2">
                      <div className="flex items-center gap-2">
                        <Loader2 className="h-4 w-4 animate-spin" />
                        <span className="text-sm text-gray-600">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="border-t p-4">
              <div className="flex gap-2">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö..."
                  disabled={loading}
                  className="flex-1"
                />
                <Button onClick={sendMessage} disabled={loading || !input.trim()} size="icon">
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="space-y-4">
        {/* –ò–Ω—Å–∞–π—Ç—ã */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Lightbulb className="h-5 w-5 text-yellow-500" />
              –ò–Ω—Å–∞–π—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            {insights.length === 0 ? (
              <p className="text-sm text-gray-600 text-center py-4">–ò–Ω—Å–∞–π—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–µ—Å–µ–¥—ã</p>
            ) : (
              <div className="space-y-3">
                {insights.slice(-3).map((insight) => (
                  <div key={insight.id} className="p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-400">
                    <p className="text-sm text-gray-800">{insight.text}</p>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* –†–µ–π—Ç–∏–Ω–≥ —Å–µ—Å—Å–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Star className="h-5 w-5 text-yellow-500" />
              –û—Ü–µ–Ω–∫–∞ —Å–µ—Å—Å–∏–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-3">–ö–∞–∫ –≤–∞–º –ø–æ–º–æ–≥–ª–∞ —ç—Ç–∞ —Å–µ—Å—Å–∏—è?</p>
              <div className="flex justify-center gap-1">
                {[1, 2, 3, 4, 5].map((rating) => (
                  <button
                    key={rating}
                    onClick={() => rateSession(rating)}
                    className={`p-1 rounded ${
                      sessionRating && sessionRating >= rating
                        ? "text-yellow-500"
                        : "text-gray-300 hover:text-yellow-400"
                    }`}
                  >
                    <Star className="h-6 w-6 fill-current" />
                  </button>
                ))}
              </div>
              {sessionRating && <p className="text-sm text-green-600 mt-2">–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</p>}
            </div>
          </CardContent>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <MessageCircle className="h-5 w-5 text-blue-500" />
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                <span className="text-sm font-medium">{messages.length - 1}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">–ò–Ω—Å–∞–π—Ç–æ–≤:</span>
                <span className="text-sm font-medium">{insights.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                <span className="text-sm font-medium">{currentDuration} –º–∏–Ω</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
